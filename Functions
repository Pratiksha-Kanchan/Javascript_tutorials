In this lesson, we covered some important concepts about functions:

    A function is a reusable block of code that groups together a sequence of statements to perform a specific task.

    A function declaration :
    Diagram showing the syntax of a function declaration

    A parameter is a named variable inside a function’s block which will be assigned the value of the argument passed in when the function is invoked:
    JavaScript syntax for declaring a function with parameters

    To call a function in your code:
    Diagram showing the syntax of invoking a function

    ES6 introduces new ways of handling arbitrary parameters through default parameters which allow us to assign a default value to a parameter in case no argument is passed into the function.

    To return a value from a function, we use a return statement.

    To define a function using function expressions:
    defining a function expression

    To define a function using arrow function notation:

    Function definition can be made concise using concise arrow notation:
    comparing single line and multiline arrow functions



Higher-Order Functions:

    Abstraction allows us to write complicated code in a way that’s easy to reuse, debug, and understand for human readers.

    We can work with functions the same way we work with any other type of data, including reassigning them to new variables.

    JavaScript functions are first-class objects, so they have properties and methods like any other object.

    Functions can be passed into other functions as parameters.

    A higher-order function is a function that either accepts functions as parameters, returns a function, or both.
